This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-14T22:11:56.594Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  globals.css
  layout.tsx
  page.tsx
components/
  ui/
    alert-dialog.tsx
    alert.tsx
    button.tsx
    card.tsx
    dialog.tsx
    input.tsx
    label.tsx
    select.tsx
    table.tsx
  InsertProviderDialog.tsx
  LoadingSpinner.tsx
  theme-provider.tsx
lib/
  utils.ts
pages/
  api/
    fetchData/
      index.ts
    fetchFormData/
      index.ts
    updateData/
      index.ts
  update_form.tsx
public/
  next.svg
  robots.txt
  vercel.svg
.eslintrc.json
.gitignore
components.json
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tree.out
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/globals.css
================
@tailwind base;
  @tailwind components;
  @tailwind utilities;

  
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.75rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes smoothColorChange {
  0% {
    filter: brightness(100%);
  }
  50% {
    filter: brightness(110%);
  }
  100% {
    filter: brightness(100%);
  }
}

.smooth-transition {
  animation: smoothColorChange 1s ease-in-out;
}

.animate-spin {
  animation: spin 1s linear infinite;
}

.header-banner {
  width: 100%;
  height: 50px; /* Set the desired height */
  background: linear-gradient(to right, #8dc63f, #0072ce, #3aa1db, #3c7c47, #0072ce);
  display: flex;
  align-items: center;
  padding: 0 20px; /* Adjust padding as needed */
}
.collapsed-row .table-cell {
  max-height: 48px; /* Adjust the height as needed */
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  cursor: pointer;
}

.expanded-row .table-cell {
  max-height: none;
  white-space: normal;
  cursor: pointer;
}

.table-cell {
  padding: 8px 16px;
  transition: max-height 0.3s ease;
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Spark Consultant Platform",
  description: "Search for consultants and hire them for your projects",
  openGraph: {
    type: "website",
    url: "https://spark-search-tool.vercel.app/",
    siteName: "Spark Consultant Platform",
    images: [
      {
        url: "https://annarborusa.org/wp-content/uploads/2022/08/SPARK-Stacked-Logo-Official-1024x320.png",
      },
    ],
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <link rel="icon" href="/spark_logo.png" />
      </head>
      <body>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
        </ThemeProvider>
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
"use client";
import { useState } from "react";
import Head from "next/head";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectTrigger,
  SelectValue,
  SelectItem,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { LoadingSpinner } from "@/components/LoadingSpinner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import InsertServiceProviderDialog from "@/components/InsertProviderDialog";

const categories = {
  Accountants: "00O38000004gR4OEAU",
  "Augmented Reality/Virtual Reality (AR/VR)": "00O0z000005I1NQEA0",
  Branding: "00O38000004ghWpEAI",
  "Communications Consultants": "00O4z0000064iFkEAI",
  Designers: "00O38000004gR4TEAU",
  "Entrepreneur in Residence (EIR)": "00O38000004spAvEAI",
  "Human Resources (HR)": "00O0z000005TmfdEAC",
  Insurance: "00O4z0000064w8nEAA",
  "Intellectual Property (IP)": "00O38000004gR4JEAU",
  Legal: "00O38000004gR4EEAU",
  Marketing: "00O38000004ghMBEAY",
  Photography: "00O4z0000069k6CEAQ",
  "Public Relations (PR)": "00O0z000005IMFNEA4",
  Software: "00O38000004stl2EAA",
  "User Interface/User Experience (UI/UX)": "00O38000004eUfBEAU",
  Website: "00O38000004ghMuEAI",
  Writers: "00O4z000006OiN5EAK",
};

type RowData = { [key: string]: string };

const Home = () => {
  const [selectedCategory, setSelectedCategory] = useState("");
  const [data, setData] = useState<RowData[]>([]);
  const [searchValue, setSearchValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [expandedRows, setExpandedRows] = useState<number[]>([]);
  const [isDialogOpen, setIsDialogOpen] = useState(true);

  const handleFetchData = async () => {
    if (!selectedCategory) return;
    const categoryId = categories[selectedCategory as keyof typeof categories];

    try {
      setIsLoading(true);
      const response = await fetch(`/api/fetchData?category_id=${categoryId}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const jsonData = await response.json();
      const extractedData = extractRows(jsonData);
      setData(extractedData);
    } catch (error) {
      console.error("Error fetching data:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const extractRows = (data: any): RowData[] => {
    const columnsInfo = data.reportExtendedMetadata.detailColumnInfo;
    const columnHeaders = [
      "*",
      ...Object.values(columnsInfo).map((info: any) => info.label),
    ];
    const factMap = data.factMap;
    const extractedData: RowData[] = [];

    for (const key in factMap) {
      if (key === "3!T" || key === "4!T") continue;

      const rows = factMap[key].rows;
      for (const row of rows) {
        const rowData: RowData = {};
        rowData["*"] = key === "2!T" ? "*" : "";

        row.dataCells.forEach((cell: any, i: number) => {
          const columnName = columnHeaders[i + 1];
          let cellValue = cell.label || "";
          if (cellValue.includes("<a href=")) {
            const tempDiv = document.createElement("div");
            tempDiv.innerHTML = cellValue;
            const link = tempDiv.querySelector("a");
            cellValue = link ? link.textContent || "" : "";
          }
          rowData[columnName] = cellValue;
        });
        extractedData.push(rowData);
      }
    }

    return extractedData;
  };

  const toggleRow = (index: number) => {
    setExpandedRows((prev) =>
      prev.includes(index) ? prev.filter((i) => i !== index) : [...prev, index]
    );
  };

  const renderCellContent = (content: string, isExpanded: boolean) => {
    if (content.length <= 90) return content;
    if (isExpanded) return content;
    return `${content.slice(0, 90)}...`;
  };

  const filteredData = data
    .filter((row) =>
      Object.values(row).some((value) =>
        value?.toLowerCase().includes(searchValue.toLowerCase())
      )
    )
    .sort((a, b) => {
      const aIsFunder = a["Communication List"]?.includes("Funder List")
        ? 1
        : 0;
      const bIsFunder = b["Communication List"]?.includes("Funder List")
        ? 1
        : 0;

      // Sort by Funder List presence first
      if (aIsFunder !== bIsFunder) {
        return bIsFunder - aIsFunder;
      }

      // Then sort by group ("0!T", "1!T", "2!T", etc.)
      if (a["*"] !== b["*"]) {
        return a["*"].localeCompare(b["*"]);
      }

      // Finally, sort alphabetically by Account Name and Contact Last Name
      const accountNameCompare = a["Account Name"]?.localeCompare(
        b["Account Name"]
      );
      if (accountNameCompare !== 0) {
        return accountNameCompare;
      }

      return a["Contact Last Name"]?.localeCompare(b["Contact Last Name"]);
    });

  const downloadCSV = () => {
    if (data.length === 0) return;

    const headers = Object.keys(data[0]);
    const csvRows = data.map((row) =>
      headers.map((header) => JSON.stringify(row[header] || "")).join(",")
    );

    const csvData = [headers.join(","), ...csvRows].join("\n");

    const blob = new Blob([csvData], { type: "text/csv" });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.setAttribute("hidden", "");
    a.setAttribute("href", url);
    a.setAttribute("download", `${selectedCategory}_consultant_data.csv`);
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  };

  const handleContinue = () => {
    setIsDialogOpen(false);
  };

  const handleCancel = () => {
    window.location.replace("https://annarborusa.org/");
  };

  return (
    <div className="container mx-auto p-4">
      <Head>
        <title>Spark Consultant Data</title>
        <link rel="icon" href="/public/spark_logo.png" />
        <meta property="og:title" content="Spark Consultant Data" />
        <meta
          property="og:description"
          content="Pull Consultant Data from Salesforce"
        />
        <meta property="og:image" content="/spark_logo.png" />
        <meta
          property="og:url"
          content="https://spark-search-tool.vercel.app/"
        />
        <meta name="robots" content="noindex" />
      </Head>

      <AlertDialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <AlertDialogContent style={{ top: "20%" }}>
          <AlertDialogHeader>
            <AlertDialogTitle>Important Notice</AlertDialogTitle>
            <AlertDialogDescription>
              Thank you for using Ann Arbor SPARK&apos;s resource database tool.
              This tool is intended to connect SPARK clients with resources in
              the community. By clicking &quot;Continue,&quot; you agree to hold
              harmless Ann Arbor SPARK from any advice which may not prove
              beneficial in any material way. Grant dollars may be available for
              an engagement with vendors or consultants. For more information on
              how to access potential funding, please contact your SPARK account
              lead. Do not share information found through this tool outside
              your organization.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel asChild>
              <Button variant="outline" onClick={handleCancel}>
                Cancel
              </Button>
            </AlertDialogCancel>
            <AlertDialogAction asChild>
              <Button variant="default" onClick={handleContinue}>
                Continue
              </Button>
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {!isDialogOpen && (
        <>
          <header className="flex justify-start items-center mb-6">
            {/* <img
              src="https://annarborusa.org/wp-content/uploads/2022/08/spark-logo.svg"
              alt="Spark Logo"
              className="w-32 h-auto"
            /> */}
          </header>

          <main>
            {/* <h1 className="text-2xl font-bold mb-4">
              Pull Consultant Data from Salesforce
            </h1> */}

            <Select
              onValueChange={setSelectedCategory}
              value={selectedCategory}
            >
              <SelectTrigger className="w-[250px]">
                <SelectValue placeholder="Select a category of consultants" />
              </SelectTrigger>
              <SelectContent>
                {Object.keys(categories).map((key) => (
                  <SelectItem key={key} value={key}>
                    {key}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <div className="flex justify-between items-center mt-4">
              <Button
                type="button"
                onClick={handleFetchData}
                disabled={isLoading}
              >
                {isLoading ? "Pulling Data..." : "Pull Data"}
              </Button>

              <div className="ml-4">
                <Button
                  type="button"
                  onClick={downloadCSV}
                  disabled={isLoading || data.length === 0}
                >
                  Download CSV
                </Button>
              </div>
              <InsertServiceProviderDialog
                onServiceProviderAdded={handleFetchData}
              />
            </div>

            <Input
              type="text"
              placeholder="Enter search value"
              value={searchValue}
              onChange={(e) => setSearchValue(e.target.value)}
              className="mt-4"
            />
            <p className="mt-4 text-sm text-gray-600">
              <strong>Note:</strong> Records that are marked with * indicate a
              consultant that is new to SPARK&rsquo;s resource database.
            </p>
            {isLoading ? (
              <div className="flex justify-center mt-4">
                <LoadingSpinner size={48} />
              </div>
            ) : (
              filteredData.length > 0 && (
                <div className="mt-4">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        {Object.keys(filteredData[0])
                          .filter((header) => header !== "Communication List") // Skip rendering "Communication List" header
                          .map((header) => (
                            <TableHead key={header}>{header}</TableHead>
                          ))}
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredData.map((row, index) => (
                        <TableRow
                          key={index}
                          onClick={() => toggleRow(index)}
                          className={`cursor-pointer ${
                            expandedRows.includes(index)
                              ? "expanded-row"
                              : "collapsed-row"
                          }`}
                        >
                          {Object.entries(row)
                            .filter(([key]) => key !== "Communication List") // Skip rendering "Communication List" data
                            .map(([key, value], i) => (
                              <TableCell key={i} className="table-cell">
                                {renderCellContent(
                                  value,
                                  expandedRows.includes(index)
                                )}
                              </TableCell>
                            ))}
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )
            )}
          </main>
        </>
      )}
    </div>
  );
};

export default Home;

================
File: components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: components/InsertProviderDialog.tsx
================
// components/InsertServiceProviderDialog.tsx
import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import Select, { GroupBase } from "react-select";
import "../app/globals.css";

interface InsertServiceProviderDialogProps {
  onServiceProviderAdded: () => void;
}

export const industryOptions = [
  { value: "Accounting", label: "Accounting" },
  { value: "Advanced Manufacturing", label: "Advanced Manufacturing" },
  { value: "Advanced Materials", label: "Advanced Materials" },
  { value: "Aeronautics", label: "Aeronautics" },
  { value: "Alt Energy-Battery", label: "Alt Energy-Battery" },
  { value: "Alt Energy-Solar", label: "Alt Energy-Solar" },
  { value: "Alt Energy-Wind", label: "Alt Energy-Wind" },
  { value: "Alternative Energy", label: "Alternative Energy" },
  { value: "Auto-Connected Vehicle", label: "Auto-Connected Vehicle" },
  { value: "Auto-Design", label: "Auto-Design" },
  { value: "Auto-Engineering", label: "Auto-Engineering" },
  { value: "Automotive", label: "Automotive" },
  { value: "Biofuels", label: "Biofuels" },
  { value: "Business Services", label: "Business Services" },
  { value: "Call Center", label: "Call Center" },
  { value: "Cannabis", label: "Cannabis" },
  { value: "Clean Technology", label: "Clean Technology" },
  { value: "Communications", label: "Communications" },
  { value: "Digital Media", label: "Digital Media" },
  { value: "Education", label: "Education" },
  { value: "Energy", label: "Energy" },
  { value: "Engineering", label: "Engineering" },
  { value: "Environmental", label: "Environmental" },
  { value: "Financial Services", label: "Financial Services" },
  { value: "Food & Beverage processing", label: "Food & Beverage processing" },
  { value: "Headquarters", label: "Headquarters" },
  { value: "Healthcare", label: "Healthcare" },
  { value: "Home Improvement", label: "Home Improvement" },
  { value: "Homeland Security", label: "Homeland Security" },
  { value: "Hospitality", label: "Hospitality" },
  { value: "Human Resources", label: "Human Resources" },
  { value: "Information Technology", label: "Information Technology" },
  { value: "Insurance Provider", label: "Insurance Provider" },
  { value: "Internet Security", label: "Internet Security" },
  { value: "IT-Applications", label: "IT-Applications" },
  { value: "IT-Database Management", label: "IT-Database Management" },
  { value: "IT-Infrastructure", label: "IT-Infrastructure" },
  {
    value: "IT-Networking/Computers-Hardware",
    label: "IT-Networking/Computers-Hardware",
  },
  { value: "IT-Social Networking", label: "IT-Social Networking" },
  { value: "Landscape /Lawn Care", label: "Landscape /Lawn Care" },
  { value: "Legal", label: "Legal" },
  { value: "Legal-Corporate", label: "Legal-Corporate" },
  { value: "Legal-IP", label: "Legal-IP" },
  {
    value: "Life Science - Bioagriculture",
    label: "Life Science - Bioagriculture",
  },
  {
    value: "Life Science - Medical Device",
    label: "Life Science - Medical Device",
  },
  { value: "Life Science - Other", label: "Life Science - Other" },
  {
    value: "Life Science - Pharma/Biotech",
    label: "Life Science - Pharma/Biotech",
  },
  { value: "Liquor", label: "Liquor" },
  { value: "Logistics", label: "Logistics" },
  { value: "Manufacturing", label: "Manufacturing" },
  { value: "MEMS", label: "MEMS" },
  { value: "Mobility", label: "Mobility" },
  { value: "Non-profit agencies", label: "Non-profit agencies" },
  { value: "Optics", label: "Optics" },
  { value: "R&D", label: "R&D" },
  { value: "Real Estate", label: "Real Estate" },
  { value: "Retail", label: "Retail" },
  { value: "Software", label: "Software" },
  { value: "Software - SaaS", label: "Software - SaaS" },
  { value: "Space/Satellites", label: "Space/Satellites" },
  { value: "Sports", label: "Sports" },
  { value: "Telecom", label: "Telecom" },
  { value: "Water Testing", label: "Water Testing" },
];

export const functionalExpertiseOptions = [
  { value: "Accounting", label: "Accounting" },
  { value: "Animation", label: "Animation" },
  { value: "App /Game Marketing", label: "App /Game Marketing" },
  { value: "Augmented Reality", label: "Augmented Reality" },
  { value: "Branding", label: "Branding" },
  { value: "Business Development", label: "Business Development" },
  { value: "Business to Business (B2B)", label: "Business to Business (B2B)" },
  { value: "Collateral Development", label: "Collateral Development" },
  {
    value: "Consumer Packaged Goods (CPG)",
    label: "Consumer Packaged Goods (CPG)",
  },
  { value: "Content Marketing", label: "Content Marketing" },
  { value: "Crowdfunding", label: "Crowdfunding" },
  { value: "Customer Discovery", label: "Customer Discovery" },
  { value: "Data Analysis", label: "Data Analysis" },
  { value: "Digital Advertising", label: "Digital Advertising" },
  { value: "Digital Engagement", label: "Digital Engagement" },
  { value: "Direct to Consumer (DTC)", label: "Direct to Consumer (DTC)" },
  { value: "E-commerce", label: "E-commerce" },
  { value: "EIR", label: "EIR" },
  { value: "EIR - GEM", label: "EIR - GEM" },
  { value: "E-learning", label: "E-learning" },
  { value: "Email Marketing", label: "Email Marketing" },
  { value: "Engineering", label: "Engineering" },
  { value: "Event Planning", label: "Event Planning" },
  { value: "Finance", label: "Finance" },
  { value: "Fundraising", label: "Fundraising" },
  {
    value: "Government Relations / Regulatory",
    label: "Government Relations / Regulatory",
  },
  { value: "Graphic Design", label: "Graphic Design" },
  { value: "Human Resources", label: "Human Resources" },
  { value: "Illustration", label: "Illustration" },
  { value: "Intellectual Property", label: "Intellectual Property" },
  {
    value: "Large Scale Graphics / Signage",
    label: "Large Scale Graphics / Signage",
  },
  { value: "Legal", label: "Legal" },
  { value: "Manufacturing", label: "Manufacturing" },
  { value: "Marketing", label: "Marketing" },
  { value: "Marketing Automation", label: "Marketing Automation" },
  { value: "Media Training", label: "Media Training" },
  { value: "Mobile Geofencing", label: "Mobile Geofencing" },
  { value: "Operations", label: "Operations" },
  { value: "Photography", label: "Photography" },
  { value: "PR/Communications", label: "PR/Communications" },
  {
    value: "Pre-order Sales & Marketing",
    label: "Pre-order Sales & Marketing",
  },
  { value: "Product Development", label: "Product Development" },
  { value: "Public Relations", label: "Public Relations" },
  { value: "Sales", label: "Sales" },
  { value: "SEO / website analytics", label: "SEO / website analytics" },
  { value: "Social Media", label: "Social Media" },
  { value: "Software Development", label: "Software Development" },
  { value: "Strategy", label: "Strategy" },
  { value: "Supply Chain", label: "Supply Chain" },
  { value: "Technology Demos", label: "Technology Demos" },
  { value: "UI/UX", label: "UI/UX" },
  { value: "Video Production", label: "Video Production" },
  { value: "Virtual Reality", label: "Virtual Reality" },
  {
    value: "Website Design & Development",
    label: "Website Design & Development",
  },
  { value: "Writing", label: "Writing" },
];

const InsertServiceProviderDialog: React.FC<
  InsertServiceProviderDialogProps
> = ({ onServiceProviderAdded }) => {
  const [formData, setFormData] = useState({
    Company: "",
    "First Name": "",
    "Last Name": "",
    Email: "",
    "Functional Expertise": [],
    "Industry Experience": [],
    Description: "",
    Website: "",
  });
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isError, setIsError] = useState(false);
  const [validationError, setValidationError] = useState("");

  const handleFormChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement
    >
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleIndustryChange = (selectedOptions: any) => {
    setFormData((prev) => ({
      ...prev,
      "Industry Experience": selectedOptions,
    }));
  };

  const handleFunctionalExpertiseChange = (selectedOptions: any) => {
    setFormData((prev) => ({
      ...prev,
      "Functional Expertise": selectedOptions,
    }));
  };

  const validateForm = () => {
    for (const key in formData) {
      if (
        key !== "Industry Experience" &&
        key !== "Functional Expertise" &&
        formData[key as keyof typeof formData] === ""
      ) {
        return `Please fill out the ${key} field.`;
      }
    }
    return "";
  };

  const handleSubmit = async () => {
    const validationError = validateForm();
    if (validationError) {
      setValidationError(validationError);
      return;
    }

    const secretUrl = process.env.NEXT_PUBLIC_MAKE_URL_V3;

    const submissionData = {
      ...formData,
      "Industry Experience": formData["Industry Experience"]
        .map((option: any) => option.value)
        .join("; "), // Convert selected options to semicolon-separated string
      "Functional Expertise": formData["Functional Expertise"]
        .map((option: any) => option.value)
        .join("; "), // Convert selected options to semicolon-separated string
    };

    try {
      const response = await fetch(
        `${secretUrl}?${new URLSearchParams(submissionData)}`,
        {
          method: "POST",
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      onServiceProviderAdded();
      setIsSubmitted(true);
      setIsError(false);
      // Clear form data
      setFormData({
        Company: "",
        "First Name": "",
        "Last Name": "",
        Email: "",
        "Functional Expertise": [],
        "Industry Experience": [],
        Description: "",
        Website: "",
      });
    } catch (error) {
      console.error("Error adding service provider:", error);
      setIsSubmitted(true);
      setIsError(true);
    }
  };

  return (
    <Dialog
      open={isSubmitted ? true : undefined}
      onOpenChange={() => setIsSubmitted(false)}
    >
      <DialogTrigger>
        <Button variant="default">Add Service Provider</Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Add a New Service Provider</DialogTitle>
          <DialogDescription>
            {isSubmitted ? (
              isError ? (
                <div
                  style={{
                    backgroundColor: "#f8d7da",
                    color: "#721c24",
                    padding: "1rem",
                    borderRadius: "0.25rem",
                    marginTop: "1rem",
                  }}
                >
                  Error uploading data. Please try again.
                </div>
              ) : (
                <div
                  style={{
                    backgroundColor: "#d4edda",
                    color: "#155724",
                    padding: "1rem",
                    borderRadius: "0.25rem",
                    marginTop: "1rem",
                  }}
                >
                  Thank you for your submission! Our team will review it
                  shortly.
                </div>
              )
            ) : (
              "Fill out the form below to be a new service provider. SPARK reviews all submissions before they are added to the database."
            )}
          </DialogDescription>
        </DialogHeader>
        {!isSubmitted && (
          <form className="space-y-4">
            <Input
              type="text"
              name="Company"
              value={formData.Company}
              onChange={handleFormChange}
              placeholder="Company"
              required
            />
            <Input
              type="text"
              name="First Name"
              value={formData["First Name"]}
              onChange={handleFormChange}
              placeholder="First Name"
              required
            />
            <Input
              type="text"
              name="Last Name"
              value={formData["Last Name"]}
              onChange={handleFormChange}
              placeholder="Last Name"
              required
            />
            <Input
              type="email"
              name="Email"
              value={formData.Email}
              onChange={handleFormChange}
              placeholder="Email"
              required
            />
            <Select
              isMulti
              name="Functional Expertise"
              options={functionalExpertiseOptions as unknown as readonly GroupBase<never>[]}
              className="basic-multi-select"
              classNamePrefix="select"
              onChange={handleFunctionalExpertiseChange}
              placeholder="Functional Expertise"
              value={formData["Functional Expertise"]}
            />

            <Select
              isMulti
              name="Industry Experience"
              options={industryOptions as unknown as readonly GroupBase<never>[]}
              className="basic-multi-select"
              classNamePrefix="select"
              onChange={handleIndustryChange}
              placeholder="Industry Experience"
              value={formData["Industry Experience"]}
            />

            <Input
              type="text"
              name="Description"
              value={formData.Description}
              onChange={handleFormChange}
              placeholder="Description"
              required
            />
            <Input
              type="url"
              name="Website"
              value={formData.Website}
              onChange={handleFormChange}
              placeholder="Website"
              required
            />
            <Button type="button" onClick={handleSubmit}>
              Submit
            </Button>
            {validationError && (
              <div
                style={{
                  backgroundColor: "#f8d7da",
                  color: "#721c24",
                  padding: "1rem",
                  borderRadius: "0.25rem",
                }}
              >
                {validationError}
              </div>
            )}
          </form>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default InsertServiceProviderDialog;

================
File: components/LoadingSpinner.tsx
================
import { cn } from "@/lib/utils";

export interface ISVGProps extends React.SVGProps<SVGSVGElement> {
  size?: number;
  className?: string;
}

export const LoadingSpinner = ({
  size = 48,
  className,
  ...props
}: ISVGProps) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width={size}
      height={size}
      {...props}
      viewBox="0 0 24 24"
      fill="none"
      stroke="#0096a6"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className={cn("animate-spin", className)}
    >
      <path d="M21 12a9 9 0 1 1-6.219-8.56" />
    </svg>
  );
};

================
File: components/theme-provider.tsx
================
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import { type ThemeProviderProps } from "next-themes/dist/types"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

================
File: lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: pages/api/fetchData/index.ts
================
// pages/api/fetchData.js
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    const { category_id } = req.query;
    const secret_url = process.env.MAKE_URL_V2;

    if (!category_id) {
        res.status(400).json({ error: 'Missing category_id' });
        return;
    }

    const make_webhook_url = `${secret_url}?category_id=${category_id}`;
    try {
        const response = await fetch(make_webhook_url, {
            method: 'POST',
        });

        if (response.ok) {
            const data = await response.json();
            res.status(200).json(data);
        } else {
            res.status(response.status).json({ error: response.statusText });
        }
    } catch (error) {
        res.status(500).json({ error: 'Internal Server Error' });
    }
}

================
File: pages/api/fetchFormData/index.ts
================
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    const { recordID } = req.query;
    const fetchApiUrl = process.env.MAKE_URL_PULL_RECORD;
  
    try {
      const response = await fetch(`${fetchApiUrl}/?recordID=${recordID}`, {
        method: 'POST',
      });
  
      if (!response.ok) {
        return res.status(response.status).json({ error: 'Failed to fetch data from Salesforce.' });
      }
  
      const data = await response.json();
      console.log(data);
      return res.status(200).json(data);
    } catch (error) {
      return res.status(500).json({ error: 'Internal Server Error' });
    }
  }

================
File: pages/api/updateData/index.ts
================
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    const updateApiUrl = process.env.MAKE_URL_UPDATE_RECORD;
    const { record_id, fields } = req.body;
    if (!updateApiUrl) {
      return res.status(400).json({ error: 'Update API URL is missing.' });
    }
    try {
      const response = await fetch(updateApiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ record_id, fields }),
      });
  
      if (!response.ok) {
        return res.status(response.status).json({ error: 'Failed to update data in Salesforce.' });
      }
  
      return res.status(200).json({ success: true });
    } catch (error) {
      return res.status(500).json({ error: 'Internal Server Error' });
    }
  }

================
File: pages/update_form.tsx
================
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import "../app/globals.css";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { Loader2 } from "lucide-react";
import Select from 'react-select';
import { industryOptions, functionalExpertiseOptions } from '@/components/InsertProviderDialog';

const UpdateForm = () => {
  const router = useRouter();
  const { record_id } = router.query;

  const [data, setData] = useState<any>(null);
  const [fields, setFields] = useState<any>({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);

  useEffect(() => {
    if (record_id) {
      fetchData(record_id);
    }
  }, [record_id]);

  const fetchData = async (record_id: string | string[]) => {
    try {
      const response = await fetch(`/api/fetchFormData?recordID=${record_id}`, {
        method: 'POST',
      });
      if (response.ok) {
        const data = await response.json();
        const functionalExpertise = data["Functional Expertise"]
          ? data["Functional Expertise"].split("; ").map((item: string) => ({
              value: item,
              label: item,
            }))
          : [];
        
        setData(data);
        setFields({
          ...data,
          "Functional Expertise": functionalExpertise,
        });
      } else {
        setError('Failed to fetch data from Salesforce.');
      }
    } catch (err) {
      setError('Failed to fetch data from Salesforce.');
    } finally {
      setLoading(false);
    }
  };

  const updateData = async (e: { preventDefault: () => void; }) => {
    e.preventDefault();

    const submissionData = {
      ...fields,
      "Functional Expertise": fields["Functional Expertise"].map(
        (option: any) => option.value
      ).join("; "),
    };

    try {
      const response = await fetch('/api/updateData', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ record_id, fields: submissionData }),
      });
      if (response.ok) {
        setSuccessMessage('Data updated successfully!');
      } else {
        setError('Failed to update data in Salesforce.');
      }
    } catch (err) {
      setError('Failed to update data in Salesforce.');
    }
  };

  const handleInputChange = (e: { target: { name: any; value: any; }; }) => {
    const { name, value } = e.target;
    setFields((prevFields: any) => ({
      ...prevFields,
      [name]: value,
    }));
    setSuccessMessage(null); // Reset success message when any input changes
  };

  const handleFunctionalExpertiseChange = (selectedOptions: any) => {
    setFields((prevFields: any) => ({
      ...prevFields,
      "Functional Expertise": selectedOptions,
    }));
    setSuccessMessage(null); // Reset success message when functional expertise changes
  };

  return (
    <div className="container mx-auto p-4 max-w-xl">
      <h1 className="text-2xl font-bold mb-6">Ann Arbor SPARK Vendor Data Updater</h1>
      {loading ? (
        <div className="flex justify-center items-center">
          <Loader2 className="animate-spin" />
          <p className="ml-2">Loading...</p>
        </div>
      ) : error ? (
        <Alert variant="destructive" className="mb-4">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      ) : (
        <Card>
          <CardHeader>
            <CardTitle>Edit Data</CardTitle>
          </CardHeader>
          <CardContent>
            {record_id ? (
              <form onSubmit={updateData} className="space-y-4">
                {Object.keys(fields).map((key) => (
                  <div key={key} className="space-y-2">
                    <Label htmlFor={key}>{key}</Label>
                    {key === "Functional Expertise" ? (
                      <Select
                        isMulti
                        name={key}
                        value={fields[key]}
                        options={functionalExpertiseOptions}
                        className="basic-multi-select"
                        classNamePrefix="select"
                        onChange={handleFunctionalExpertiseChange}
                        placeholder="Select Functional Expertise"
                      />
                    ) : (
                      <Input
                        type="text"
                        id={key}
                        name={key}
                        value={fields[key] || ''}
                        onChange={handleInputChange}
                      />
                    )}
                  </div>
                ))}
                {successMessage && (
                  <Alert variant="default" className="mt-4">
                    <AlertTitle>Success</AlertTitle>
                    <AlertDescription>{successMessage}</AlertDescription>
                  </Alert>
                )}
              </form>
            ) : (
              <p>Record ID not provided in the URL.</p>
            )}
          </CardContent>
          <CardFooter>
            <Button type="submit" onClick={updateData}>
              Submit Changes
            </Button>
          </CardFooter>
        </Card>
      )}
    </div>
  );
};

export default UpdateForm;

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/robots.txt
================
User-agent: *
Disallow: /

================
File: public/vercel.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "gray",
    "cssVariables": true
  },
  "aliases": {
    "utils": "@/lib/utils",
    "components": "@/components"
  }
}

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

================
File: package.json
================
{
  "name": "spark_consultant_platform",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@tanstack/react-table": "^8.19.3",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.407.0",
    "next": "^14.2.14",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-dom": "^18",
    "react-select": "^5.8.0",
    "tailwind-merge": "^2.4.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.5",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
      colors: {
            "border": "hsl(var(--border))",
            "input": "hsl(var(--input))",
            "ring": "hsl(var(--ring))",
            "background": "hsl(var(--background))",
            "foreground": "hsl(var(--foreground))",
            "primary": {
              "DEFAULT": "hsl(var(--primary))",
              "foreground": "hsl(var(--primary-foreground))"
            },
            "secondary": {
              "DEFAULT": "hsl(var(--secondary))",
              "foreground": "hsl(var(--secondary-foreground))"
            },
            "destructive": {
              "DEFAULT": "hsl(var(--destructive))",
              "foreground": "hsl(var(--destructive-foreground))"
            },
            "muted": {
              "DEFAULT": "hsl(var(--muted))",
              "foreground": "hsl(var(--muted-foreground))"
            },
            "accent": {
              "DEFAULT": "hsl(var(--accent))",
              "foreground": "hsl(var(--accent-foreground))"
            },
            "popover": {
              "DEFAULT": "hsl(var(--popover))",
              "foreground": "hsl(var(--popover-foreground))"
            },
            "card": {
              "DEFAULT": "hsl(var(--card))",
              "foreground": "hsl(var(--card-foreground))"
            }
          },
      borderRadius: {
            "lg": "var(--radius)",
            "md": "calc(var(--radius) - 2px)",
            "sm": "calc(var(--radius) - 4px)"
          },
      keyframes: {
            "accordion-down": {
              "from": {
                "height": "0"
              },
              "to": {
                "height": "var(--radix-accordion-content-height)"
              }
            },
            "accordion-up": {
              "from": {
                "height": "var(--radix-accordion-content-height)"
              },
              "to": {
                "height": "0"
              }
            }
          }
},
  plugins: [require("tailwindcss-animate")],
};
export default config;

================
File: tree.out
================
.
├── README.md
├── app
│   ├── favicon.ico
│   ├── globals.css
│   ├── layout.tsx
│   └── page.tsx
├── components.json
├── lib
│   └── utils.ts
├── next-env.d.ts
├── next.config.mjs
├── package-lock.json
├── package.json
├── pages
│   └── api
│       └── fetchData
│           └── route.ts
├── postcss.config.mjs
├── public
│   ├── next.svg
│   └── vercel.svg
├── tailwind.config.ts
├── tree.out
└── tsconfig.json

7 directories, 18 files

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
